<!DOCTYPE html>
<html lang="no">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>konklavesimulator</title>
  <meta property="og:title" content="konklavesimulator" />
  <meta name="twitter:title" content="konklavesimulator" />
  <meta property="og:type" content="website" />
  <meta property="og:site_name" content="konklavesimulator" />
  <meta property="og:url" content="https://yourdomain.com/index.html" />
  <meta property="og:description" content="Bli med på en humoristisk quiz og finn din kardinal!" />
  <meta name="twitter:card" content="summary_large_image" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
</head>
<body class="min-h-screen bg-yellow-50 p-8 font-sans flex items-center justify-center">
  <div id="root" class="w-full max-w-xl"></div>
  <script type="text/babel">
    const { useState, useEffect, useMemo } = React;

    const questions = [
      { key: 'gender', prompt: 'Er du mann?', options: ['Ja', 'Nei'] },
      { key: 'continent', prompt: 'Hvilket kontinent føler du deg mest hjemme på?', options: [] },
      { key: 'goat', prompt: 'Hvem er GOAT?', options: ['Francis', 'Benedict XVI', 'John Paul II', 'Annen'] },
      { key: 'q1', prompt: 'Skal kirken tilrettelegge for inkludering, herunder relatert til spørsmål om LHBTQ+ rettigheter og likestilling i kirken?', options: [1,2,3,4,5] },
      { key: 'q2', prompt: 'Er kirken klar til å bli den nye superhelten i kampen mot klimaendringer og sosial rettferdighet?', options: [1,2,3,4,5] },
      { key: 'q3', prompt: 'Hva synes du om å gi kirkens liturgier en makeover og inkludere kvinnelige prester, biskoper, kardinaler eller en kvinnelig pave?', options: [1,2,3,4,5] }
    ];

    function matches(c, answers, avg) {
      const contVal = String(c.Continent || '').trim().toLowerCase();
      const ansCont = String(answers.continent || '').trim().toLowerCase();
      if (answers.continent && contVal !== ansCont) return false;
      const popeVal = String(c.PopeWhoCreated || '').trim().toLowerCase();
      const ansGoat = String(answers.goat || '').trim().toLowerCase();
      // Hvis brukeren valgte 'Annen', hopp over Pave-filteret
      if (answers.goat && answers.goat !== 'Annen' && !popeVal.includes(ansGoat)) return false;
      if (avg != null) {
        const orient = String(c.Orientation || '').trim().toLowerCase();
        const cat = avg <= 2 ? 'conservative' : avg < 4 ? 'moderate' : 'liberal';
        if (!orient.includes(cat)) return false;
      }
      return true;
    }

    function ProgressBar({ step, total }) {
      const pct = total ? Math.round((step / total) * 100) : 0;
      return (
        <div className="w-full bg-gray-200 h-3 rounded mb-4">
          <div className="bg-red-500 h-3 rounded" style={{ width: `${pct}%` }} />
        </div>
      );
    }

    function Quiz({ data, onFinish }) {
      const [step, setStep] = useState(0);
      const [answers, setAnswers] = useState({});

      const continentOptions = useMemo(() => {
        return Array.from(new Set(data.map(d => String(d.Continent || '').trim())))
          .filter(v => v)
          .sort();
      }, [data]);

      const current = questions[step];
      const remainingData = data.filter(c => matches(c, answers, null));
      const remaining = remainingData.length;

      const opts = current.key === 'continent' ? continentOptions : current.options;

      const handleChoice = val => {
        const newAns = { ...answers, [current.key]: val };
        setAnswers(newAns);
        if (current.key === 'gender' && val === 'Nei') { onFinish(newAns, true); return; }
        if (step < questions.length - 1) setStep(step + 1);
        else onFinish(newAns, false);
      };

      return (
        <div>
          <p className="text-sm mb-2">{remaining} kardinaler gjenstår</p>
          <ProgressBar step={step} total={questions.length} />
          <h2 className="text-xl font-bold mb-3">{current.prompt}</h2>
          <div className="space-y-2">
            {opts.map((opt, i) => (
              <button
                key={`${current.key}-opt-${i}`}
                onClick={() => handleChoice(opt)}
                className="w-full py-2 bg-red-500 text-white rounded hover:bg-red-600"
              >{opt}</button>
            ))}
          </div>
          <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4 max-h-64 overflow-auto">
            {remainingData.map((c, idx) => (
              <div key={`${c.Name}-${c.Rank}-${idx}`} className="p-3 bg-white rounded-xl shadow">
                <h4 className="font-bold text-red-600">{c.Name}</h4>
                <p className="text-sm text-gray-700">{c.Rank}, {c.Continent}</p>
              </div>
            ))}
          </div>
        </div>
      );
    }

    function Results({ data, answers, score, onRetry, onSelect, ended }) {
      if (ended && answers.gender === 'Nei') return null;
      const filtered = data.filter(c => matches(c, answers, score));
      if (filtered.length === 1) {
        const c = filtered[0];
        return (
          <div className="space-y-6 text-center">
            <h2 className="text-3xl font-bold">Gratulerer!</h2>
            <p className="text-lg">Du har fylt ut stemmekortet og er klar for å stemme i konklaven.</p>
            <div className="bg-white p-6 rounded-2xl shadow text-left max-w-md mx-auto space-y-2">
              <h3 className="text-2xl font-bold text-red-600">{c.Name}</h3>
              <p><strong>Fødselsår:</strong> {c.YearOfBirth}</p>
              <p><strong>Fødeland:</strong> {c.CountryOfBirth}</p>
              <p><strong>Kontinent:</strong> {c.Continent}</p>
              <p><strong>Orientering:</strong> {c.Orientation}</p>
              <p><strong>Rang:</strong> {c.Rank}</p>
              <p><strong>Tilleggsopplysninger:</strong> {c.AdditionalNotes}</p>
              <p className="italic">📝 {c.Rationale}</p>
            </div>
            <button onClick={onRetry} className="mt-3 py-2 px-4 bg-blue-500 text-white rounded">Start på nytt</button>
            <div className="mt-4">
              <a href="https://chatgpt.com/g/g-680f5a813d488191bf604b8e64b8cc8f-konklave-drama" target="_blank" rel="noopener noreferrer" className="text-purple-600 underline">
                Klikk her for å få vite hva valget av pave sier om deg
              </a>
            </div>
          </div>
        );
      }
      const top3 = filtered.slice(0, 3);
      return (
        <div>
          <p className="mb-2 font-semibold">Dette er dine topp tre kardinaler. Hvem vil du stemme på?</p>
          <div className="space-y-4">
            {top3.map((c, i) => (
              <div
                key={`${c.Name}-${i}`}
                onClick={() => onSelect(c)}
                className="p-4 bg-white rounded shadow cursor-pointer"
              >
                <h4 className="font-bold text-red-600 mb-1">{c.Name}</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  <li><strong>Fødselsår:</strong> {c.YearOfBirth}</li>
                  <li><strong>Orientering:</strong> {c.Orientation}</li>
                  <li><strong>Kontinent:</strong> {c.Continent}</li>
                  <li><strong>Rang:</strong> {c.Rank}</li>
                  <li><strong>Rasjonale:</strong> <em>{c.Rationale}</em></li>
                </ul>
              </div>
            ))}
            {top3.length === 0 && (
              <div className="text-center">
                <p>Ingen treff. Prøv igjen!</p>
                <button onClick={onRetry} className="mt-2 py-2 px-4 bg-blue-500 text-white rounded">Start på nytt</button>
              </div>
            )}
          </div>
        </div>
      );
    }

    function App() {
      const [intro, setIntro] = useState(true);
      const [data, setData] = useState([]);
      const [loaded, setLoaded] = useState(false);
      const [answers, setAnswers] = useState({});
      const [score, setScore] = useState(null);
      const [ended, setEnded] = useState(false);
      const [finalCandidate, setFinalCandidate] = useState(null);

      const handleFile = e => {
        const file = e.target.files[0]; if (!file) return;
        const reader = new FileReader();
        reader.onload = ev => {
          const wb = XLSX.read(new Uint8Array(ev.target.result), { type: 'array' });
          const ws = wb.Sheets[wb.SheetNames[0]];
          const arr = XLSX.utils.sheet_to_json(ws, { defval: '' });
          const mapped = arr.map(r => ({
            Name: r['Name'],
            YearOfBirth: r['Fødselsår'],
            CountryOfBirth: r['Fødeland'],
            Continent: r['Kontinent'] || r['Continent'] || '', // Støtte for engelsk kolonnenavn
            Orientation: r['Orientering'],
            Rank: r['Rank'] || r['Rang'] || '',
            PopeWhoCreated: r['Kreert av'],
            Rationale: r['Rasjonale for orientering'],
            AdditionalNotes: r['Tilleggsopplysninger'] || '',
            Favorite: String(r['Tilleggsopplysninger'] || '').toLowerCase().includes('favorittstempel'),
          }));
          setData(mapped); setLoaded(true);
        };
        reader.readAsArrayBuffer(file);
      };

      const finishQuiz = (ans, quit) => {
        setAnswers(ans || {});
        if (quit) { setEnded(true); return; }
        setScore((ans.q1 + ans.q2 + ans.q3) / 3);
      };

      const handleSelect = c => { setFinalCandidate(c); };
      const retry = () => { setIntro(true); setAnswers({}); setScore(null); setEnded(false); setFinalCandidate(null); };

      if (intro) {
        return (
          <div className="text-center space-y-8 p-4">
            <div className="text-8xl animate-bounce">😇</div>
            <h1 className="text-5xl font-extrabold">Velkommen til Kardinal Simulator!</h1>
            <p className="text-gray-700">Bli med på en humoristisk quiz og finn din kardinal!</p>
            <button onClick={() => setIntro(false)} className="py-4 px-8 bg-purple-600 text-white rounded-full shadow hover:bg-purple-700 transition">🚀 Start Quiz</button>
          </div>
        );
      }

      if (!loaded) {
        return (
          <div className="text-center">
            <h1 className="mb-4 text-2xl">Last opp Excel med kardinaldata</h1>
            <input type="file" accept=".xlsx" onChange={handleFile} />
          </div>
        );
      }

      if (ended && answers.gender === 'Nei') {
        return (
          <div className="fixed inset-0 flex flex-col items-center justify-center bg-red-600 text-white p-4">
            <h2 className="text-2xl font-bold mb-4">kvinner kan ikke bli pave, kom deg tilbake til kjøkkenet kvinne</h2>
            <button onClick={retry} className="py-2 px-4 bg-white text-red-600 rounded">Start på nytt</button>
          </div>
        );
      }

      if (score === null && !ended) {
        return <Quiz data={data} onFinish={finishQuiz} />;
      }

      if (finalCandidate) {
        const c = finalCandidate;
        return (
          <div className="space-y-6 text-center">
            <h2 className="text-3xl font-bold">Gratulerer!</h2>
            <p className="text-lg">Du har valgt {c.Name}. Her er ID-kortet:</p>
            <div className="bg-white p-6 rounded-2xl shadow text-left max-w-md mx-auto space-y-2">
              <h3 className="text-2xl font-bold text-red-600">{c.Name}</h3>
              <p><strong>Fødselsår:</strong> {c.YearOfBirth}</p>
              <p><strong>Fødeland:</strong> {c.CountryOfBirth}</p>
              <p><strong>Kontinent:</strong> {c.Continent}</p>
              <p><strong>Orientering:</strong> {c.Orientation}</p>
              <p><strong>Rang:</strong> {c.Rank}</p>
              <p><strong>Tilleggsopplysninger:</strong> {c.AdditionalNotes}</p>
              <p className="italic">📝 {c.Rationale}</p>
            </div>
            <button onClick={retry} className="mt-3 py-2 px-4 bg-blue-500 text-white rounded">Start på nytt</button>
            <div className="mt-4">
              <a href="https://chatgpt.com/g/g-680f5a813d488191bf604b8e64b8cc8f-konklave-drama" target="_blank" rel="noopener noreferrer" className="text-purple-600 underline">
                Klikk her for å få vite hva valget av pave sier om deg
              </a>
            </div>
          </div>
        );
      }
      // Default rendering of top 3 candidates
      return (
        <Results
          data={data}
          answers={answers}
          score={score}
          onRetry={retry}
          onSelect={handleSelect}
          ended={ended}
        />
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>
